!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=o(n(1));let i;var c;!function(e){e[e.UP=38]="UP",e[e.DOWN=40]="DOWN",e[e.LEFT=37]="LEFT",e[e.RIGHT=39]="RIGHT"}(c||(c={}));const l=[{x:33,y:50},{x:32,y:50},{x:31,y:50},{x:30,y:50}];let u,s,a,d,f=c.RIGHT,h=6,y=l,x=[];function p(){a.clearRect(0,0,s.width,s.height),v(),a.strokeStyle=d,a.lineWidth=2,a.lineCap="round",a.lineJoin="round",a.beginPath(),null==a||a.moveTo(y[0].x,y[0].y),y.slice(1).forEach(e=>null==a?void 0:a.lineTo(e.x,e.y)),a.stroke(),x.forEach(e=>{a.beginPath(),a.arc(e.x,e.y,.5,0,2*Math.PI),a.stroke(),a.strokeStyle="red",a.fillStyle="red",a.fill()}),document.onkeydown=b;const e=function(e){switch(f){case c.DOWN:return{x:e.x,y:e.y+1};case c.UP:return{x:e.x,y:e.y-1};case c.RIGHT:return{x:e.x+1,y:e.y};case c.LEFT:return{x:e.x-1,y:e.y};default:return e}}(y[0]);var t;!function(e){x.forEach((t,n)=>{(function(e,t,n){let o=Math.pow(Math.abs(e.x-t.x),2),r=Math.pow(Math.abs(e.y-t.y),2);return n-Math.pow(o+r,.5)>0})(t,e,2)&&(null==i||i.increment(1),x.splice(n,1),h++)})}(e),x.length<3&&function(){let e={x:5+Math.floor(190*Math.random()),y:5+Math.floor(190*Math.random())};y.find(t=>t==e)||x.find(t=>t==e)||x.push(e)}(),t=e,(y.find(e=>e===t)||t.x>=200||t.x<=0||t.y>=200||t.y<=0)&&(console.log("game Over"),g()),y=[e,...y],y.length>h&&y.pop()}function m(){x=[],y=l,h=6,f=c.RIGHT,u=setInterval(p,17)}function g(){clearInterval(u)}function b(e){const t=37+(f-37+2)%4;e.keyCode in c&&e.keyCode!==t&&(f=e.keyCode,document.onkeydown=null)}function v(){a.rect(0,0,s.width,s.height),a.strokeStyle="black",a.lineWidth=1,a.stroke()}window.onload=()=>{document.querySelector("#startButton").addEventListener("click",m),document.querySelector("#stopButton").addEventListener("click",g),s=document.querySelector("#game"),i=new r.default(document.querySelector("#scoreBox"));try{a=s.getContext("2d")}catch(e){console.log("could not find ctx")}d=a.createLinearGradient(0,0,s.width,s.height),d.addColorStop(.25,"#73e943"),d.addColorStop(.75,"#73e943"),d.addColorStop(.5,"#42801d"),v()},console.log("hi")},function(e,t,n){"use strict";e.exports=class{constructor(e,t){this._score=t||0,this.element=e,this.element.innerText=this.score.toString()}get score(){return this._score}set score(e){this._score=e,this.element.innerText=this._score.toString()}reset(){this._score=0,this.element.innerText="0"}increment(e){this._score+=e,this.element.innerText=this._score.toString()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,