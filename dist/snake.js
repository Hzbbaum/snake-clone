!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=o(n(1));let i;const c="ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0;var l;!function(e){e[e.UP=38]="UP",e[e.DOWN=40]="DOWN",e[e.LEFT=37]="LEFT",e[e.RIGHT=39]="RIGHT"}(l||(l={}));const u=window.screen.width,s=window.screen.height,a=[{x:33,y:50},{x:32,y:50},{x:31,y:50},{x:30,y:50}];let d,h,f,y,x=l.RIGHT,p=6,m=a,g=[];function w(){f.clearRect(0,0,h.width,h.height),_(),f.strokeStyle=y,f.lineWidth=2,f.lineCap="round",f.lineJoin="round",f.beginPath(),null==f||f.moveTo(m[0].x,m[0].y),m.slice(1).forEach(e=>null==f?void 0:f.lineTo(e.x,e.y)),f.stroke(),g.forEach(e=>{f.beginPath(),f.arc(e.x,e.y,.5,0,2*Math.PI),f.stroke(),f.strokeStyle="red",f.fillStyle="red",f.fill()}),c?window.ontouchstart=S:document.onkeydown=b;const e=function(e){switch(x){case l.DOWN:return{x:e.x,y:e.y+1};case l.UP:return{x:e.x,y:e.y-1};case l.RIGHT:return{x:e.x+1,y:e.y};case l.LEFT:return{x:e.x-1,y:e.y};default:return e}}(m[0]);var t;!function(e){g.forEach((t,n)=>{(function(e,t,n){let o=Math.pow(Math.abs(e.x-t.x),2),r=Math.pow(Math.abs(e.y-t.y),2);return n-Math.pow(o+r,.5)>0})(t,e,2)&&(null==i||i.increment(1),g.splice(n,1),p++)})}(e),g.length<3&&function(){let e={x:5+Math.floor(190*Math.random()),y:5+Math.floor(190*Math.random())};m.find(t=>t==e)||g.find(t=>t==e)||g.push(e)}(),t=e,(m.find(e=>e===t)||t.x>=200||t.x<=0||t.y>=200||t.y<=0)&&v(),m=[e,...m],m.length>p&&m.pop()}function T(){i.reset(),g=[],m=a,p=6,x=l.RIGHT,d=setInterval(w,17)}function v(){clearInterval(d)}function b(e){const t=37+(x-37+2)%4;e.keyCode in l&&e.keyCode!==t&&(x=e.keyCode,document.onkeydown=null)}function S(e){const t=x==l.LEFT||x==l.RIGHT;console.log(e.touches[0].clientX,e.touches[0].clientX,t?"horizontal":"vertical"),t?(e.touches[0].clientY<s/3&&(x=l.UP),e.touches[0].clientY>2*s/3&&(x=l.DOWN)):(e.touches[0].clientX<u/3&&(x=l.LEFT),e.touches[0].clientX>2*u/3&&(x=l.RIGHT)),console.log(l[x])}function _(){f.rect(0,0,h.width,h.height),f.strokeStyle="black",f.lineWidth=1,f.stroke()}window.onload=()=>{document.querySelector("#startButton").addEventListener("click",T),document.querySelector("#stopButton").addEventListener("click",v),h=document.querySelector("#game"),i=new r.default(document.querySelector("#scoreBox"));try{f=h.getContext("2d")}catch(e){console.log("could not find ctx")}y=f.createLinearGradient(0,0,h.width,h.height),y.addColorStop(.25,"#73e943"),y.addColorStop(.75,"#73e943"),y.addColorStop(.5,"#42801d"),_()}},function(e,t,n){"use strict";e.exports=class{constructor(e,t){this._score=t||0,this.element=e,this.element.innerText=this.score.toString()}get score(){return this._score}set score(e){this._score=e,this.element.innerText=this._score.toString()}reset(){this._score=0,this.element.innerText="0"}increment(e){this._score+=e,this.element.innerText=this._score.toString()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,